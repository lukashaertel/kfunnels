package eu.metatools.kfunnels.base

import eu.metatools.kfunnels.SeqSink
import eu.metatools.kfunnels.SeqSource

/**
 * A token in a list generated by [ListSink], used to mark special events.
 */
enum class ListToken {
    IS_NULL, IS_NOT_NULL, BEGIN_NESTING, END_NESTING
}

/**
 * Sink that receives items into a list. Use [reset] to get the list and reset the buffer.
 */
class ListSink : SeqSink {
    private val list = arrayListOf<Any?>()

    fun reset(): List<Any?> {
        val r = list.toList()
        list.clear()
        return r
    }

    override fun putBoolean(b: Boolean) {
        list += b
    }

    override fun putByte(b: Byte) {
        list += b
    }

    override fun putShort(s: Short) {
        list += s
    }

    override fun putInt(i: Int) {
        list += i
    }

    override fun putLong(l: Long) {

        list += l
    }

    override fun putFloat(f: Float) {
        list += f
    }

    override fun putDouble(d: Double) {
        list += d
    }

    override fun putChar(c: Char) {
        list += c
    }

    override fun putNull(isNull: Boolean) {
        if (isNull)
            list += ListToken.IS_NULL
        else
            list += ListToken.IS_NOT_NULL
    }

    override fun putUnit(unit: Unit) {
        list += unit
    }

    override fun putString(string: String) {
        list += string
    }

    override fun beginNested() {
        list += ListToken.BEGIN_NESTING
    }

    override fun endNested() {
        list += ListToken.END_NESTING
    }
}

/**
 * Source that provides elements from the [list], use [ListSink] to create it.
 */
class ListSource(val list: List<Any?>) : SeqSource {
    var pos = 0

    override fun getBoolean(): Boolean {
        check(pos < list.size)
        return list[pos++] as Boolean
    }

    override fun getByte(): Byte {
        check(pos < list.size)
        return list[pos++] as Byte
    }

    override fun getShort(): Short {
        check(pos < list.size)
        return list[pos++] as Short
    }

    override fun getInt(): Int {
        check(pos < list.size)
        return list[pos++] as Int
    }


    override fun getLong(): Long {
        check(pos < list.size)
        return list[pos++] as Long
    }

    override fun getFloat(): Float {
        check(pos < list.size)
        return list[pos++] as Float
    }

    override fun getDouble(): Double {
        check(pos < list.size)
        return list[pos++] as Double
    }

    override fun getChar(): Char {
        check(pos < list.size)
        return list[pos++] as Char
    }

    override fun isNull(): Boolean {
        check(pos < list.size)
        return when (list[pos++] as ListToken) {
            ListToken.IS_NULL -> true
            ListToken.IS_NOT_NULL -> false
            else -> throw IllegalStateException("Not a list token")
        }
    }

    override fun getUnit() {
        check(pos < list.size)
        return list[pos++] as Unit
    }

    override fun getString(): String {
        check(pos < list.size)
        return list[pos++] as String
    }

    override fun beginNested() {
        check(pos < list.size)
        check(list[pos++] == ListToken.BEGIN_NESTING)
    }

    override fun endNested() {
        check(pos < list.size)
        check(list[pos++] == ListToken.END_NESTING)
    }
}